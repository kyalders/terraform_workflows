# Terraform Resuable Workflow - v2
# Has TF Lint job
# Ability to run all terraform commands based on inputs
# When tf-destroy is applied an automatic sleep timer is set, this sleep input can also be supplied by the calling workflow
# variables input is a string input that expects a JSON formated string of variables to be passed into the terraform run
# token-files is an input pointing to an array of files that will pass through tokenization
### As as side note, tokenization allows us to set values an environment level before the code is processed in that environment.

name: 'Terraform Workflow'
on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
        description: Github Environment targeted for deployment.
      tf-path:
        required: false
        type: string
        default: "${{ github.workspace }}"
        description: Path to your terraform content. Ensure the working directory is set within your terraform cloud workspace to match. Defaults to root.
      tf-plan:
        required: false
        type: boolean
        default: false
        description: Will run terraform plan. If set, an apply will not occur.      
      tf-apply:
        required: false
        type: boolean
        default: true
        description: Will run terraform plan. If set, an apply will not occur.
      tf-destroy:
        required: false
        type: boolean
        default: false
        description: When set, will perform a terraform destroy after an apply.
      tf-version:
        required: false
        type: string
        default: "~1.1.0"
        description: Terraform version to target.
      sleep: 
        required: false
        type: number
        default: 300
        description: Sets a sleep timer, in seconds, on a terraform destroy command.
      token-files:
        required: false
        type: string
        default: '["**/*.tf"]'
        description: A string array files that will be tokenized. Must include full path to files.
      variables: 
        required: false
        type: string
        default: ""
        description: Terraform variables that will be passed on the command line. Variables must be provided in json format without quotations.

    secrets:
      TF_API_TOKEN:
        required: true

jobs:
  tf-lint:
    name: TF Lint
    if: ${{ inputs.env == 'dev' && !inputs.destroy }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.tf-path }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup TF Lint
        uses: terraform-linters/setup-tflint@v1
        with:
          tflint_version: latest

      - name: Init TFLint
        run: tflint --init

      - name: Run TFLint
        run: tflint -f json

  terraform-provision:
    name: 'Terraform Provisioning'
    if: ${{ always() }}
    needs: tf-lint
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Replace Tokens
      uses: cschleiden/replace-tokens@v1
      with:
        files: '${{ inputs.token-files }}'
      env:
        environment: ${{ inputs.env }}

    - name: Append Variables - Output
      id: append-variables
      run: |
        $env:variables | Out-File -FilePath .\var.txt
        $varStringFile = Get-Content -Path .\var.txt

        $varString = ""
        foreach($line in $varStringFile) {
          $varString += $line
        }

        $varObj = $varString | ConvertFrom-Json -Depth 5
        Write-Host $varObj | Format-Table

        $variableStrings = ""
        foreach($var in $varObj.PSObject.Properties) {
          Write-Host $var.Name
          Write-Host $var.Value
          $type = $var.Value.GetType().ToString()
          Write-Host $type

          $value = $var.Value
          if($type -eq "System.Object[]"){
            Write-Host "Inside Loop"
            $value = ""
            Write-Host $var.Value.Count
            for($i = 0; $i -lt $var.Value.Count; $i++) {
              if(($i +1) -eq $var.Value.Count) {
                $value += "`""
                $value += $var.Value[$i]
                $value += "`""
              }
              else {
                $value += "`""
                $value += $var.Value[$i]
                $value += "`", "
              }
            }
            $value = "[$($value)]"
          }

          $variableStrings += "-var='$($var.Name)=$($value)' "
        }

        Write-Host $variableStrings
        Write-Host "::set-output name=variableStrings::$($variableStrings)"
      shell: pwsh -command ". {0}"
      env:
        variables: ${{ inputs.variables }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_version: ${{ inputs.tf-version }}

    - name: Terraform Init
      run: terraform init -upgrade
      working-directory: ${{ inputs.tf-path }}

    - name: Terraform Format
      run: terraform fmt -check
      continue-on-error: true
      working-directory: ${{ inputs.tf-path }}

    - name: Terraform Plan
      run: |
        terraform validate
        terraform plan ${{ steps.append-variables.outputs.variableStrings }}
      if: inputs.tf-plan
      working-directory: ${{ inputs.tf-path }}

    - name: Terraform Apply
      if: inputs.tf-apply
      run: terraform apply -auto-approve ${{ steps.append-variables.outputs.variableStrings }}
      working-directory: ${{ inputs.tf-path }}

    - name: Terraform Destroy
      run: |
        sleep ${{ inputs.sleep }}s
        terraform destroy -auto-approve ${{ steps.append-variables.outputs.variableStrings }}
      if: inputs.tf-destroy
      working-directory: ${{ inputs.tf-path }}
